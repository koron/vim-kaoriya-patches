# HG changeset patch
# Parent fde93adeda8d91c54211d002010c4476c27e8dcc
implement 'transparency' for Windows GUI

diff --git a/src/gui_w32.c b/src/gui_w32.c
index e6b5dad54..9b7aefe31 100644
--- a/src/gui_w32.c
+++ b/src/gui_w32.c
@@ -42,6 +42,13 @@ static void directx_binddc(void);
 static int gui_mswin_get_menu_height(int fix_window);
 #endif
 
+/*
+ * For Transparent Window.
+ */
+typedef DWORD (WINAPI *FWINLAYER)(HWND hwnd, DWORD crKey, BYTE bAlpha,
+	DWORD dwFlags);
+static void w32_set_transparency(HWND hwnd, BYTE bAlpha);
+
 #if defined(FEAT_RENDER_OPTIONS) || defined(PROTO)
     int
 gui_mch_set_rendering_options(char_u *s)
@@ -5215,6 +5222,8 @@ gui_mch_init(void)
     if (s_hwnd == NULL)
 	return FAIL;
 
+    w32_set_transparency(s_hwnd, p_transparency);
+
 #ifdef GLOBAL_IME
     global_ime_init(atom, s_hwnd);
 #endif
@@ -5539,6 +5548,44 @@ gui_mch_set_sp_color(guicolor_T color)
     gui.currSpColor = color;
 }
 
+    void
+w32_set_transparency(HWND hwnd, BYTE bAlpha)
+{
+    FWINLAYER pfLayer;
+    HANDLE hDll;
+
+    if (!hwnd)
+	hwnd = s_hwnd;
+
+    // Turn off transpareny
+    if (bAlpha == 255)
+    {
+	SetWindowLong(hwnd, GWL_EXSTYLE, ~WS_EX_LAYERED &
+		GetWindowLong(hwnd, GWL_EXSTYLE));
+	return;
+    }
+
+    // Obtain pointer to function set transparecy rate
+    if (!(hDll = LoadLibrary("user32.dll")))
+	return;
+    pfLayer = (FWINLAYER)GetProcAddress(hDll, "SetLayeredWindowAttributes");
+
+    if (pfLayer)
+    {
+	SetWindowLong(hwnd, GWL_EXSTYLE, WS_EX_LAYERED |
+		GetWindowLong(hwnd, GWL_EXSTYLE));
+	pfLayer(hwnd, 0, bAlpha, LWA_ALPHA);
+    }
+
+    FreeLibrary(hDll);
+}
+
+    void
+gui_mch_set_transparency(int alpha)
+{
+    w32_set_transparency(NULL, (BYTE)alpha);
+}
+
 #ifdef FEAT_MBYTE_IME
 /*
  * Multi-byte handling, originally by Sung-Hoon Baek.
diff --git a/src/option.c b/src/option.c
index 5c99c6966..c581e47a1 100644
--- a/src/option.c
+++ b/src/option.c
@@ -3330,6 +3330,18 @@ set_num_option(
 	screenclear();	    // will re-allocate the screen
     }
 
+#if defined(FEAT_GUI_MSWIN) || defined(VIMDLL)
+    else if ((long *)varp == &p_transparency)
+    {
+	if (p_transparency < 1 || p_transparency > 255)
+	    p_transparency = 255;
+# ifdef VIMDLL
+	if (gui.in_use)
+# endif
+	    gui_mch_set_transparency(p_transparency);
+    }
+#endif
+
     else if (pp == &curbuf->b_p_iminsert)
     {
 	if (curbuf->b_p_iminsert < 0 || curbuf->b_p_iminsert > B_IMODE_LAST)
diff --git a/src/option.h b/src/option.h
index 4ccf22a87..27aae4099 100644
--- a/src/option.h
+++ b/src/option.h
@@ -962,6 +962,7 @@ EXTERN char_u	*p_titleold;	// 'titleold'
 EXTERN char_u	*p_titlestring;	// 'titlestring'
 #endif
 EXTERN char_u	*p_tsr;		// 'thesaurus'
+EXTERN long	p_transparency;	// 'transparency'
 EXTERN int	p_ttimeout;	// 'ttimeout'
 EXTERN long	p_ttm;		// 'ttimeoutlen'
 EXTERN int	p_tbi;		// 'ttybuiltin'
diff --git a/src/optiondefs.h b/src/optiondefs.h
index 8fda8bff8..6e9701ab3 100644
--- a/src/optiondefs.h
+++ b/src/optiondefs.h
@@ -2653,6 +2653,10 @@ static struct vimoption options[] =
 			    {(char_u *)0L, (char_u *)0L}
 #endif
 			    SCTX_INIT},
+    {"transparency", "tra", P_NUM|P_VI_DEF,
+			    (char_u *)&p_transparency, PV_NONE,
+			    {(char_u *)255L, (char_u *)0L}
+			    SCTX_INIT},
     {"ttimeout",    NULL,   P_BOOL|P_VI_DEF|P_VIM,
 			    (char_u *)&p_ttimeout, PV_NONE,
 			    {(char_u *)FALSE, (char_u *)0L} SCTX_INIT},
diff --git a/src/proto/gui_w32.pro b/src/proto/gui_w32.pro
index 4ead92e74..28e03b25a 100644
--- a/src/proto/gui_w32.pro
+++ b/src/proto/gui_w32.pro
@@ -70,6 +70,7 @@ void gui_mch_set_font(GuiFont font);
 void gui_mch_set_fg_color(guicolor_T color);
 void gui_mch_set_bg_color(guicolor_T color);
 void gui_mch_set_sp_color(guicolor_T color);
+void gui_mch_set_transparency(int alpha);
 void im_set_font(LOGFONTW *lf);
 void im_set_position(int row, int col);
 void im_set_active(int active);
diff --git a/src/testdir/gen_opt_test.vim b/src/testdir/gen_opt_test.vim
index f70623b0a..ca59c21b4 100644
--- a/src/testdir/gen_opt_test.vim
+++ b/src/testdir/gen_opt_test.vim
@@ -140,6 +140,7 @@ let test_values = {
       \ 'termwintype': [['', 'winpty', 'conpty'], ['xxx']],
       \ 'toolbar': [['', 'icons', 'text'], ['xxx']],
       \ 'toolbariconsize': [['', 'tiny', 'huge'], ['xxx']],
+      \ 'transparency': [['0', '128', '255'], ['xxx']],
       \ 'ttymouse': [['', 'xterm'], ['xxx']],
       \ 'ttytype': [[], []],
       \ 'varsofttabstop': [['8', '4,8,16,32'], ['xxx', '-1', '4,-1,20']],
