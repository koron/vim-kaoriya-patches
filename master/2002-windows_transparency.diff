# HG changeset patch
# Parent fde93adeda8d91c54211d002010c4476c27e8dcc
implement 'transparency' for Windows GUI

diff --git a/src/gui_w32.c b/src/gui_w32.c
index be2158d..93fe465 100644
--- a/src/gui_w32.c
+++ b/src/gui_w32.c
@@ -40,6 +40,13 @@ static int s_directx_load_attempted = 0;
 static int gui_mswin_get_menu_height(int fix_window);
 #endif
 
+/*
+ * For Transparent Window.
+ */
+typedef DWORD (WINAPI *FWINLAYER)(HWND hwnd, DWORD crKey, BYTE bAlpha,
+	DWORD dwFlags);
+static void w32_set_transparency(HWND hwnd, BYTE bAlpha);
+
 #if defined(FEAT_DIRECTX) || defined(PROTO)
     int
 directx_enabled(void)
@@ -5373,6 +5380,8 @@ gui_mch_init(void)
     if (s_hwnd == NULL)
 	return FAIL;
 
+    w32_set_transparency(s_hwnd, 255);
+
 #ifdef GLOBAL_IME
     global_ime_init(atom, s_hwnd);
 #endif
@@ -5727,6 +5736,44 @@ gui_mch_set_sp_color(guicolor_T color)
     gui.currSpColor = color;
 }
 
+    void
+w32_set_transparency(HWND hwnd, BYTE bAlpha)
+{
+    FWINLAYER pfLayer;
+    HANDLE hDll;
+
+    if (!hwnd)
+	hwnd = s_hwnd;
+
+    /* Turn off transpareny */
+    if (bAlpha == 255)
+    {
+	SetWindowLong(hwnd, GWL_EXSTYLE, ~WS_EX_LAYERED &
+		GetWindowLong(hwnd, GWL_EXSTYLE));
+	return;
+    }
+
+    /* Obtain pointer to function set transparecy rate */
+    if (!(hDll = LoadLibrary("user32.dll")))
+	return;
+    pfLayer = (FWINLAYER)GetProcAddress(hDll, "SetLayeredWindowAttributes");
+
+    if (pfLayer)
+    {
+	SetWindowLong(hwnd, GWL_EXSTYLE, WS_EX_LAYERED |
+		GetWindowLong(hwnd, GWL_EXSTYLE));
+	pfLayer(hwnd, 0, bAlpha, LWA_ALPHA);
+    }
+
+    FreeLibrary(hDll);
+}
+
+    void
+gui_mch_set_transparency(int alpha)
+{
+    w32_set_transparency(NULL, (BYTE)alpha);
+}
+
 #if defined(FEAT_MBYTE) && defined(FEAT_MBYTE_IME)
 /*
  * Multi-byte handling, originally by Sung-Hoon Baek.
diff --git a/src/option.c b/src/option.c
index ebf443b..c2e83ae 100644
--- a/src/option.c
+++ b/src/option.c
@@ -2717,6 +2717,11 @@ static struct vimoption options[] =
 			    (char_u *)&p_tbis, PV_NONE,
 			    {(char_u *)"small", (char_u *)0L} SCRIPTID_INIT},
 #endif
+#ifdef USE_TRANSPARENCY
+    {"transparency", "tra", P_NUM|P_VI_DEF,
+			    (char_u *)&p_transparency, PV_NONE,
+			    {(char_u *)255L, (char_u *)0L}},
+#endif
     {"ttimeout",    NULL,   P_BOOL|P_VI_DEF|P_VIM,
 			    (char_u *)&p_ttimeout, PV_NONE,
 			    {(char_u *)FALSE, (char_u *)0L} SCRIPTID_INIT},
@@ -8669,6 +8674,15 @@ set_num_option(
     }
 #endif
 
+#ifdef USE_TRANSPARENCY
+    else if ((long *)varp == &p_transparency)
+    {
+	if (p_transparency < 1 || p_transparency > 255)
+	    p_transparency = 255;
+	gui_mch_set_transparency(p_transparency);
+    }
+#endif
+
     else if (pp == &curbuf->b_p_iminsert)
     {
 	if (curbuf->b_p_iminsert < 0 || curbuf->b_p_iminsert > B_IMODE_LAST)
diff --git a/src/option.h b/src/option.h
index 13acabf..8ba0202 100644
--- a/src/option.h
+++ b/src/option.h
@@ -860,6 +860,9 @@ EXTERN char_u	*p_titlestring;	/* 'titlestring' */
 #ifdef FEAT_INS_EXPAND
 EXTERN char_u	*p_tsr;		/* 'thesaurus' */
 #endif
+#ifdef USE_TRANSPARENCY
+EXTERN long	p_transparency;	/* 'transparency'*/
+#endif
 EXTERN int	p_ttimeout;	/* 'ttimeout' */
 EXTERN long	p_ttm;		/* 'ttimeoutlen' */
 EXTERN int	p_tbi;		/* 'ttybuiltin' */
diff --git a/src/os_win32.h b/src/os_win32.h
index f620d74..583745d 100644
--- a/src/os_win32.h
+++ b/src/os_win32.h
@@ -81,6 +81,7 @@
 
 #ifdef FEAT_GUI_W32
 # define NO_CONSOLE		/* don't included console-only code */
+# define USE_TRANSPARENCY
 #endif
 
 /* toupper() is not really broken, but it's very slow.	Probably because of
diff --git a/src/proto/gui_w32.pro b/src/proto/gui_w32.pro
index 3c99f97..3ff4040 100644
--- a/src/proto/gui_w32.pro
+++ b/src/proto/gui_w32.pro
@@ -71,6 +71,7 @@ void gui_mch_set_font(GuiFont font);
 void gui_mch_set_fg_color(guicolor_T color);
 void gui_mch_set_bg_color(guicolor_T color);
 void gui_mch_set_sp_color(guicolor_T color);
+void gui_mch_set_transparency(int alpha);
 void im_set_font(LOGFONT *lf);
 void im_set_position(int row, int col);
 void im_set_active(int active);
