# HG changeset patch
# Parent b310fc3abf0bd107728295980e4090a7573dea3d
add 'auto' for 'ambiwidth'

diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
index 23923a53f..0ad04bfa0 100644
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -694,6 +694,9 @@ A jump table for the options with a short description can be found at |Q_op|.
 	"single":	Use the same width as characters in US-ASCII.  This is
 			expected by most users.
 	"double":	Use twice the width of ASCII characters.
+	"auto":		Use obtained width from system.
+			{only for Win NT/2K systems, currently}
+
 							*E834* *E835*
 	The value "double" cannot be used if 'listchars' or 'fillchars'
 	contains a character that would be double width.
@@ -718,6 +721,10 @@ A jump table for the options with a short description can be found at |Q_op|.
 	escape sequence to request cursor position report.  The response can
 	be found in |v:termu7resp|.
 
+	On some systems, we can use width for a character which defined by
+	font design.  If you use such a system try "auto" for this option.
+	It will give you more nice result for a font which you select.
+
 			*'antialias'* *'anti'* *'noantialias'* *'noanti'*
 'antialias' 'anti'	boolean (default: off)
 			global
diff --git a/src/gui_w32.c b/src/gui_w32.c
index 43bdc4d65..200a0d59c 100644
--- a/src/gui_w32.c
+++ b/src/gui_w32.c
@@ -5061,6 +5061,56 @@ error:
 }
 #endif
 
+#ifdef USE_AMBIWIDTH_AUTO
+#define CHARWIDE_CACHESIZE 0x20000
+static GuiFont last_font = 0;
+
+    int
+gui_mch_get_charwidth(int c)
+{
+    static int cache[CHARWIDE_CACHESIZE];
+    GuiFont usingfont = gui.wide_font ? gui.wide_font : gui.norm_font;
+
+    // Check validity of charwide cache
+    if (last_font != usingfont)
+    {
+	// Update cache. -1 is mark for uninitialized cell
+	int i;
+
+	TRACE("Charwide cache will be updated (base=%d)\n", gui.char_width);
+	last_font = usingfont;
+	for (i = 0; i < CHARWIDE_CACHESIZE; ++i)
+	    cache[i] = -1;
+    }
+    if (usingfont && 0 <= c && c < CHARWIDE_CACHESIZE)
+    {
+	if (cache[c] >= 0)
+	    return cache[c]; // Use cached value
+	else
+	{
+	    // Get true character width in dot, convert to cells and save it.
+	    int	    len;
+	    ABC	    fontABC;
+	    HFONT   hfntOld = SelectFont(s_hdc, usingfont);
+
+	    if (!GetCharABCWidthsW(s_hdc, c, c, &fontABC) ||
+		    (len = fontABC.abcA + fontABC.abcB + fontABC.abcC) <= 0)
+	    {
+		TRACE("GetCharABCWidthsW() failed for %08X\n", c);
+		cache[c] = 0;
+	    }
+	    else
+		cache[c] = ((len + (gui.char_width >> 1)) / gui.char_width);
+	    SelectFont(s_hdc, hfntOld);
+
+	    return cache[c];
+	}
+    }
+    else
+	return 0;
+}
+#endif
+
 /*
  * Parse the GUI related command-line arguments.  Any arguments used are
  * deleted from argv, and *argc is decremented accordingly.  This is called
diff --git a/src/mbyte.c b/src/mbyte.c
index 5dd256268..52591cb8f 100644
--- a/src/mbyte.c
+++ b/src/mbyte.c
@@ -1574,6 +1574,19 @@ utf_char2cells(int c)
 	{0x1f6f3, 0x1f6f3}
     };
 
+#ifdef USE_AMBIWIDTH_AUTO
+    if (gui.in_use && *p_ambw == 'a')
+    {
+	int cell;
+
+	/* This is required by screen.c implicitly. */
+	if (c == 0)
+	    return 1;
+	if (utf_printable(c) && (cell = gui_mch_get_charwidth(c)) > 0)
+	    return cell;
+    }
+#endif
+
     if (c >= 0x100)
     {
 #ifdef USE_WCHAR_FUNCTIONS
diff --git a/src/optionstr.c b/src/optionstr.c
index 98e90a453..ba05402a9 100644
--- a/src/optionstr.c
+++ b/src/optionstr.c
@@ -13,7 +13,11 @@
 
 #include "vim.h"
 
-static char *(p_ambw_values[]) = {"single", "double", NULL};
+static char *(p_ambw_values[]) = {"single", "double",
+# ifdef USE_AMBIWIDTH_AUTO
+    "auto",
+# endif
+    NULL};
 static char *(p_bg_values[]) = {"light", "dark", NULL};
 static char *(p_bkc_values[]) = {"yes", "auto", "no", "breaksymlink", "breakhardlink", NULL};
 static char *(p_bo_values[]) = {"all", "backspace", "cursor", "complete",
diff --git a/src/proto/gui_w32.pro b/src/proto/gui_w32.pro
index b54487921..a98ad2102 100644
--- a/src/proto/gui_w32.pro
+++ b/src/proto/gui_w32.pro
@@ -78,6 +78,7 @@ void im_set_active(int active);
 int im_get_status(void);
 void gui_mch_draw_string(int row, int col, char_u *text, int len, int flags);
 void gui_mch_flush(void);
+int gui_mch_get_charwidth(int c);
 void gui_mch_get_screen_dimensions(int *screen_w, int *screen_h);
 void gui_mch_add_menu(vimmenu_T *menu, int pos);
 void gui_mch_show_popupmenu(vimmenu_T *menu);
diff --git a/src/vim.h b/src/vim.h
index a01d4b290..4b47dfc2a 100644
--- a/src/vim.h
+++ b/src/vim.h
@@ -516,6 +516,13 @@ typedef unsigned int u8char_T;	// int is 32 bits or more
 # endif
 #endif
 
+/*
+ * Whether 'ambiwidth' supports "auto".  Currently, only for Win32.
+ */
+#if defined(FEAT_GUI) && defined(FEAT_GUI_MSWIN)
+# define USE_AMBIWIDTH_AUTO
+#endif
+
 /*
  * For dynamically loaded gettext library.  Currently, only for Win32.
  */
