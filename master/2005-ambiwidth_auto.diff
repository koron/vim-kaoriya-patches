# HG changeset patch
# Parent b310fc3abf0bd107728295980e4090a7573dea3d
add 'auto' for 'ambiwidth'

diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
index 06b1940..0efbc8d 100644
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -693,6 +693,9 @@ A jump table for the options with a short description can be found at |Q_op|.
 	"single":	Use the same width as characters in US-ASCII.  This is
 			expected by most users.
 	"double":	Use twice the width of ASCII characters.
+	"auto":		Use obtained width from system.
+			{only for Win NT/2K systems, currently}
+
 							*E834* *E835*
 	The value "double" cannot be used if 'listchars' or 'fillchars'
 	contains a character that would be double width.
@@ -716,6 +719,10 @@ A jump table for the options with a short description can be found at |Q_op|.
 	compiled with the |+termresponse| feature and if |t_u7| is set to the
 	escape sequence to request cursor position report.
 
+	On some systems, we can use width for a character which defined by
+	font design.  If you use such a system try "auto" for this option.
+	It will give you more nice result for a font which you select.
+
 			*'antialias'* *'anti'* *'noantialias'* *'noanti'*
 'antialias' 'anti'	boolean (default: off)
 			global
diff --git a/src/gui_w32.c b/src/gui_w32.c
index 67228f7..b36cc40 100644
--- a/src/gui_w32.c
+++ b/src/gui_w32.c
@@ -5174,3 +5174,54 @@ netbeans_init_winsock()
 	WSInitialized = TRUE;
 }
 #endif
+
+#ifdef USE_AMBIWIDTH_AUTO
+#define CHARWIDE_CACHESIZE 65536
+static GuiFont last_font = 0;
+
+    int
+gui_mch_get_charwidth(int c)
+{
+    static char cache[CHARWIDE_CACHESIZE];
+    GuiFont usingfont = gui.wide_font ? gui.wide_font : gui.norm_font;
+
+    /* Check validity of charwide cache */
+    if (last_font != usingfont)
+    {
+	/* Update cache. -1 is mark for uninitialized cell */
+	TRACE("Charwide cache will be updated (base=%d)\n", gui.char_width);
+	last_font = usingfont;
+	memset(cache, -1, sizeof(cache));
+    }
+    if (usingfont && 0 <= c && c < CHARWIDE_CACHESIZE)
+    {
+	if (cache[c] >= 0)
+	    return cache[c]; /* Use cached value */
+	else
+	{
+	    /* 
+	     * Get true character width in dot, convert to cells and save
+	     * it.
+	     */
+	    int	    len;
+	    ABC	    fontABC;
+	    HFONT   hfntOld = SelectFont(s_hdc, usingfont);
+
+	    if (!GetCharABCWidthsW(s_hdc, c, c, &fontABC) ||
+		    (len = fontABC.abcA + fontABC.abcB + fontABC.abcC) <= 0)
+	    {
+		TRACE("GetCharABCWidthsW() failed for %08X\n", c);
+		cache[c] = 0;
+	    }
+	    else
+		cache[c] = (char)((len + (gui.char_width >> 1))
+			/ gui.char_width);
+	    SelectFont(s_hdc, hfntOld);
+
+	    return cache[c];
+	}
+    }
+    else
+	return 0;
+}
+#endif
diff --git a/src/mbyte.c b/src/mbyte.c
index edca9a7..420682d 100644
--- a/src/mbyte.c
+++ b/src/mbyte.c
@@ -1459,6 +1459,19 @@ utf_char2cells(c)
 	{0x100000, 0x10fffd}
     };
 
+#ifdef USE_AMBIWIDTH_AUTO
+    if (gui.in_use && *p_ambw == 'a')
+    {
+	int cell;
+
+	/* This is required by screen.c implicitly. */
+	if (c == 0)
+	    return 1;
+	if ((cell = gui_mch_get_charwidth(c)) > 0)
+	    return cell;
+    }
+#endif
+
     if (c >= 0x100)
     {
 #ifdef USE_WCHAR_FUNCTIONS
diff --git a/src/option.c b/src/option.c
index 33428c8..becbb1a 100644
--- a/src/option.c
+++ b/src/option.c
@@ -3052,7 +3052,11 @@ static struct vimoption
 #define PARAM_COUNT (sizeof(options) / sizeof(struct vimoption))
 
 #ifdef FEAT_MBYTE
-static char *(p_ambw_values[]) = {"single", "double", NULL};
+static char *(p_ambw_values[]) = {"single", "double",
+# ifdef USE_AMBIWIDTH_AUTO
+    "auto",
+# endif
+    NULL};
 #endif
 static char *(p_bg_values[]) = {"light", "dark", NULL};
 static char *(p_nf_values[]) = {"bin", "octal", "hex", "alpha", NULL};
diff --git a/src/proto/gui_w32.pro b/src/proto/gui_w32.pro
index e3cea9f..f6fae0b 100644
--- a/src/proto/gui_w32.pro
+++ b/src/proto/gui_w32.pro
@@ -78,6 +78,7 @@ void im_set_active(int active);
 int im_get_status(void);
 void gui_mch_draw_string(int row, int col, char_u *text, int len, int flags);
 void gui_mch_flush(void);
+int gui_mch_get_charwidth(int c);
 void gui_mch_get_screen_dimensions(int *screen_w, int *screen_h);
 void gui_mch_add_menu(vimmenu_T *menu, int pos);
 void gui_mch_show_popupmenu(vimmenu_T *menu);
diff --git a/src/vim.h b/src/vim.h
index 90a5353..8ae8400 100644
--- a/src/vim.h
+++ b/src/vim.h
@@ -559,6 +559,14 @@ typedef unsigned long u8char_T;	    /* long should be 32 bits or more */
 #endif
 
 /*
+ * Whether 'ambiwidth' supports "auto".  Currently, only for Win32.
+ */
+#if defined(FEAT_MBYTE) && defined(FEAT_GUI) && \
+    (defined(FEAT_GUI_W32))
+# define USE_AMBIWIDTH_AUTO
+#endif
+
+/*
  * For dynamically loaded gettext library.  Currently, only for Win32.
  */
 #ifdef DYNAMIC_GETTEXT
