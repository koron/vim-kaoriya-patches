add 'C' flag to 'guioptions' which control to show the caption of window

diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
index 86e0e024b..caae19117 100644
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -4077,6 +4077,9 @@ A jump table for the options with a short description can be found at |Q_op|.
 		try to keep 'lines' and 'columns' the same when adding and
 		removing GUI components.
 
+	  'C'	Remove caption (title) bar.  Support Win32 only.
+
+
 						*'guipty'* *'noguipty'*
 'guipty'		boolean	(default on)
 			global
diff --git a/src/gui.c b/src/gui.c
index b9217b459..e94f0ed47 100644
--- a/src/gui.c
+++ b/src/gui.c
@@ -3476,6 +3476,8 @@ gui_init_which_components(char_u *oldval UNUSED)
     static int	prev_tearoff = -1;
     int		using_tearoff = FALSE;
 #endif
+    static int	prev_nocaption = -1;
+    int		using_caption = TRUE;
 
     char_u	*p;
     int		i;
@@ -3551,6 +3553,9 @@ gui_init_which_components(char_u *oldval UNUSED)
 		using_tearoff = TRUE;
 #endif
 		break;
+	    case GO_NOCAPTION:
+		using_caption = FALSE;
+		break;
 	    default:
 		// Ignore options that are not supported
 		break;
@@ -3652,6 +3657,14 @@ gui_init_which_components(char_u *oldval UNUSED)
 	    prev_tearoff = using_tearoff;
 	}
 #endif
+	if (using_caption != prev_nocaption)
+	{
+#if defined(MSWIN)
+	    gui_mch_show_caption(using_caption);
+#endif
+	    prev_nocaption = using_caption;
+	    need_set_size = TRUE;
+	}
 	if (need_set_size != 0)
 	{
 #ifdef FEAT_GUI_GTK
diff --git a/src/gui_w32.c b/src/gui_w32.c
index cc136cdf4..43630217a 100644
--- a/src/gui_w32.c
+++ b/src/gui_w32.c
@@ -1148,6 +1148,55 @@ _OnSizeTextArea(
 #endif
 }
 
+    static int
+has_caption(void)
+{
+    return GetWindowLong(s_hwnd, GWL_STYLE) & WS_CAPTION;
+}
+
+    static int
+get_caption_height(void)
+{
+    // A window's caption includes extra 1 dot margin.  When caption is
+    // removed the margin also be removed.  So we must return -1 when
+    // caption is diabled.
+    return has_caption() ? pGetSystemMetricsForDpi(SM_CYCAPTION, s_dpi) : -1;
+}
+
+    static int
+get_caption_width_adjustment(void)
+{
+    return has_caption() ? 0 : -2;
+}
+
+    void
+gui_mch_show_caption(int show)
+{
+    const static LONG flags_on = WS_CAPTION;
+    const static LONG flags_off = 0;
+    LONG style, newstyle;
+
+    // Remove caption when title is null
+    style = newstyle = GetWindowLong(s_hwnd, GWL_STYLE);
+    if (show)
+    {
+	newstyle &= ~flags_off;
+	newstyle |= flags_on;
+    }
+    else
+    {
+	newstyle &= ~flags_on;
+	newstyle |= flags_off;
+    }
+    if (newstyle != style)
+    {
+	SetWindowLong(s_hwnd, GWL_STYLE, newstyle);
+	SetWindowPos(s_hwnd, NULL, 0, 0, 0, 0,
+		SWP_FRAMECHANGED | SWP_NOMOVE | SWP_NOSIZE | SWP_NOZORDER);
+	gui_set_shellsize(FALSE, FALSE, RESIZE_BOTH);
+    }
+}
+
 #ifdef FEAT_MENU
 /*
  * Find the vimmenu_T with the given id
@@ -3112,11 +3161,12 @@ gui_mswin_get_valid_dimensions(
 
     base_width = gui_get_base_width()
 	+ (pGetSystemMetricsForDpi(SM_CXFRAME, s_dpi) +
-	   pGetSystemMetricsForDpi(SM_CXPADDEDBORDER, s_dpi)) * 2;
+	   pGetSystemMetricsForDpi(SM_CXPADDEDBORDER, s_dpi)) * 2
+	+ get_caption_width_adjustment();
     base_height = gui_get_base_height()
 	+ (pGetSystemMetricsForDpi(SM_CYFRAME, s_dpi) +
 	   pGetSystemMetricsForDpi(SM_CXPADDEDBORDER, s_dpi)) * 2
-	+ pGetSystemMetricsForDpi(SM_CYCAPTION, s_dpi)
+	+ get_caption_height()
 	+ gui_mswin_get_menu_height(FALSE);
     *cols = (w - base_width) / gui.char_width;
     *rows = (h - base_height) / gui.char_height;
@@ -3591,12 +3641,13 @@ gui_mch_newfont(void)
     if (win_socket_id == 0)
     {
 	gui_resize_shell(rect.right - rect.left
+	    - get_caption_width_adjustment()
 	    - (pGetSystemMetricsForDpi(SM_CXFRAME, s_dpi) +
 	       pGetSystemMetricsForDpi(SM_CXPADDEDBORDER, s_dpi)) * 2,
 	    rect.bottom - rect.top
 	    - (pGetSystemMetricsForDpi(SM_CYFRAME, s_dpi) +
 	       pGetSystemMetricsForDpi(SM_CXPADDEDBORDER, s_dpi)) * 2
-	    - pGetSystemMetricsForDpi(SM_CYCAPTION, s_dpi)
+	    - get_caption_height()
 	    - gui_mswin_get_menu_height(FALSE));
     }
     else
@@ -5546,10 +5597,11 @@ gui_mch_set_shellsize(
 
     // compute the size of the outside of the window
     win_width = width + (pGetSystemMetricsForDpi(SM_CXFRAME, s_dpi) +
-		     pGetSystemMetricsForDpi(SM_CXPADDEDBORDER, s_dpi)) * 2;
+		     pGetSystemMetricsForDpi(SM_CXPADDEDBORDER, s_dpi)) * 2
+			+ get_caption_width_adjustment();
     win_height = height + (pGetSystemMetricsForDpi(SM_CYFRAME, s_dpi) +
 		       pGetSystemMetricsForDpi(SM_CXPADDEDBORDER, s_dpi)) * 2
-			+ pGetSystemMetricsForDpi(SM_CYCAPTION, s_dpi)
+			+ get_caption_height()
 			+ gui_mswin_get_menu_height(FALSE);
 
     // The following should take care of keeping Vim on the same monitor, no
@@ -6419,7 +6471,8 @@ gui_mch_get_screen_dimensions(int *screen_w, int *screen_h)
 
     *screen_w = workarea_rect.right - workarea_rect.left
 		- (pGetSystemMetricsForDpi(SM_CXFRAME, s_dpi) +
-		   pGetSystemMetricsForDpi(SM_CXPADDEDBORDER, s_dpi)) * 2;
+		   pGetSystemMetricsForDpi(SM_CXPADDEDBORDER, s_dpi)) * 2
+		- get_caption_width_adjustment();
 
     // FIXME: dirty trick: Because the gui_get_base_height() doesn't include
     // the menubar for MSwin, we subtract it from the screen height, so that
@@ -6427,7 +6480,7 @@ gui_mch_get_screen_dimensions(int *screen_w, int *screen_h)
     *screen_h = workarea_rect.bottom - workarea_rect.top
 		- (pGetSystemMetricsForDpi(SM_CYFRAME, s_dpi) +
 		   pGetSystemMetricsForDpi(SM_CXPADDEDBORDER, s_dpi)) * 2
-		- pGetSystemMetricsForDpi(SM_CYCAPTION, s_dpi)
+		- get_caption_height()
 		- gui_mswin_get_menu_height(FALSE);
 }
 
diff --git a/src/option.h b/src/option.h
index 898ae7c1b..4e56f81d5 100644
--- a/src/option.h
+++ b/src/option.h
@@ -296,7 +296,8 @@ typedef enum {
 #define GO_FOOTER	'F'		// add footer
 #define GO_VERTICAL	'v'		// arrange dialog buttons vertically
 #define GO_KEEPWINSIZE	'k'		// keep GUI window size
-#define GO_ALL		"!aAbcdefFghilmMprtTvk" // all possible flags for 'go'
+#define GO_NOCAPTION	'C'		// remove caption bar
+#define GO_ALL		"!aAbcCdefFghilmMprtTvk" // all possible flags for 'go'
 
 // flags for 'comments' option
 #define COM_NEST	'n'		// comments strings nest
diff --git a/src/proto/gui_w32.pro b/src/proto/gui_w32.pro
index 7c555666d..0a505e7d5 100644
--- a/src/proto/gui_w32.pro
+++ b/src/proto/gui_w32.pro
@@ -61,6 +61,7 @@ void gui_mch_settitle(char_u *title, char_u *icon);
 void mch_set_mouse_shape(int shape);
 char_u *gui_mch_browse(int saving, char_u *title, char_u *dflt, char_u *ext, char_u *initdir, char_u *filter);
 char_u *gui_mch_browsedir(char_u *title, char_u *initdir);
+void gui_mch_show_caption(int show);
 void gui_mch_set_parent(char *title);
 char *gui_mch_do_spawn(char_u *arg);
 void gui_mch_prepare(int *argc, char **argv);
