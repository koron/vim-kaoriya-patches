# HG changeset patch
# Parent 3e9f602e3362e01b850845651357f0a6886d7875
# Parent  ce73d82e98a71a688494690978f4e8fe3cc010f6
Add C/Migemo feature

diff --git a/runtime/doc/options.txt b/runtime/doc/options.txt
index 0ad04bfa0..05f307e04 100644
--- a/runtime/doc/options.txt
+++ b/runtime/doc/options.txt
@@ -5120,6 +5120,32 @@ A jump table for the options with a short description can be found at |Q_op|.
 	generated from a list of items, e.g., the Buffers menu.  Changing this
 	option has no direct effect, the menu must be refreshed first.
 
+						*'migemo'* *'mgm'*
+'migemo' 'mgm'		boolean (default off)
+			local to buffer
+			{not in Vi, +kaoriya only}
+	Change the mapped feature for |g?| to incremental backward search with
+	migemo.
+
+	NOTE: To enable migemo search, |'migemodict'| option is required that
+	set correct migemo's dictionary.
+
+						*'migemodict'* *'mgd'*
+'migemodict' 'mgd'	string (default "")
+			global
+			{not in Vi, +kaoriya only}
+	Specify path to migemo-dict file (migemo dictionary).
+
+	Migemo features is enabled if this option was setup.
+	These migemo features will be available when enabled.
+
+		g/	Incremental forward search
+		g?	Incremental backward search.
+			Enabled by |'migemo'| option.
+		migemo({string})
+			Generate regexp pattern which expanded {string} with
+			migemo.
+
 						*'mkspellmem'* *'msm'*
 'mkspellmem' 'msm'	string	(default "460000,2000,500")
 			global
diff --git a/src/Make_mvc.mak b/src/Make_mvc.mak
index 02457dbfc..6fbd92195 100644
--- a/src/Make_mvc.mak
+++ b/src/Make_mvc.mak
@@ -910,6 +910,14 @@ GETTEXT = yes
 CFLAGS = $(CFLAGS) -DDYNAMIC_GETTEXT
 !endif
 
+#
+# Support Migemo
+#
+!ifdef MIGEMO
+!message Migemo supported - will be dynamic linked.
+CFLAGS = $(CFLAGS) -DDYNAMIC_MIGEMO
+!endif
+
 # TCL interface
 !ifdef TCL
 ! ifndef TCL_VER
diff --git a/src/config.h.in b/src/config.h.in
index deeceb7a9..8a8a98e43 100644
--- a/src/config.h.in
+++ b/src/config.h.in
@@ -177,6 +177,7 @@
 #undef HAVE_LOCALTIME_R
 #undef HAVE_LSTAT
 #undef HAVE_MEMSET
+#undef HAVE_MIGEMO
 #undef HAVE_MKDTEMP
 #undef HAVE_NANOSLEEP
 #undef HAVE_NL_LANGINFO_CODESET
@@ -245,6 +246,7 @@
 #undef HAVE_LIBGEN_H
 #undef HAVE_LIBINTL_H
 #undef HAVE_LOCALE_H
+#undef HAVE_MIGEMO_H
 #undef HAVE_MATH_H
 #undef HAVE_NDIR_H
 #undef HAVE_POLL_H
diff --git a/src/configure.ac b/src/configure.ac
index fd93b7822..8adb4e4da 100644
--- a/src/configure.ac
+++ b/src/configure.ac
@@ -3229,7 +3229,7 @@ fi
 AC_CHECK_HEADERS(stdint.h stdlib.h string.h \
 	sys/select.h sys/utsname.h termcap.h fcntl.h \
 	sgtty.h sys/ioctl.h sys/time.h sys/types.h \
-	termio.h iconv.h inttypes.h langinfo.h math.h \
+	termio.h iconv.h inttypes.h langinfo.h math.h migemo.h \
 	unistd.h stropts.h errno.h sys/resource.h \
 	sys/systeminfo.h locale.h sys/stream.h termios.h \
 	libc.h sys/statfs.h poll.h sys/poll.h pwd.h \
@@ -4339,6 +4339,19 @@ else
   AC_MSG_RESULT(yes)
 fi
 
+dnl Check for C/Migemo (regexp pattern expansion).
+AC_MSG_CHECKING(--disable-migemo argument)
+AC_ARG_ENABLE(migemo,
+	[  --disable-migemo        Don't support C/Migemo.], ,
+	[enable_migemo="yes"])
+if test "$enable_migemo" = "yes"; then
+  AC_MSG_RESULT(no)
+  AC_CHECK_LIB(migemo, migemo_open,
+	[LIBS="$LIBS -lmigemo" AC_DEFINE(HAVE_MIGEMO)],,)
+else
+  AC_MSG_RESULT(yes)
+fi
+
 dnl Check for dynamic linking loader
 AC_CHECK_HEADER(dlfcn.h, DLL=dlfcn.h, [AC_CHECK_HEADER(dl.h, DLL=dl.h)])
 if test x${DLL} = xdlfcn.h; then
diff --git a/src/evalfunc.c b/src/evalfunc.c
index 892a7538f..ccc4848e6 100644
--- a/src/evalfunc.c
+++ b/src/evalfunc.c
@@ -143,6 +143,7 @@ static void f_matchlist(typval_T *argvars, typval_T *rettv);
 static void f_matchstr(typval_T *argvars, typval_T *rettv);
 static void f_matchstrpos(typval_T *argvars, typval_T *rettv);
 static void f_max(typval_T *argvars, typval_T *rettv);
+static void f_migemo(typval_T *argvars, typval_T *rettv);
 static void f_min(typval_T *argvars, typval_T *rettv);
 #ifdef FEAT_MZSCHEME
 static void f_mzeval(typval_T *argvars, typval_T *rettv);
@@ -571,6 +572,7 @@ static funcentry_T global_functions[] =
     {"matchstr",	2, 4, FEARG_1,	  f_matchstr},
     {"matchstrpos",	2, 4, FEARG_1,	  f_matchstrpos},
     {"max",		1, 1, FEARG_1,	  f_max},
+    {"migemo",		1, 1, FEARG_1,	  f_migemo},
     {"min",		1, 1, FEARG_1,	  f_min},
     {"mkdir",		1, 3, FEARG_1,	  f_mkdir},
     {"mode",		0, 1, FEARG_1,	  f_mode},
@@ -3445,6 +3447,11 @@ f_has(typval_T *argvars, typval_T *rettv)
 #ifdef FEAT_MENU
 	"menu",
 #endif
+#ifdef USE_MIGEMO
+# ifndef DYNAMIC_MIGEMO
+	"migemo",
+# endif
+#endif
 #ifdef FEAT_SESSION
 	"mksession",
 #endif
@@ -3814,6 +3821,10 @@ f_has(typval_T *argvars, typval_T *rettv)
 	else if (STRICMP(name, "terminal") == 0)
 	    n = terminal_enabled();
 #endif
+#ifdef USE_MIGEMO
+	else if (STRICMP(name, "migemo") == 0)
+	    n = migemo_enabled() ? TRUE : FALSE;
+#endif
 #if defined(FEAT_TERMINAL) && defined(MSWIN)
 	else if (STRICMP(name, "conpty") == 0)
 	    n = use_conpty();
@@ -4867,6 +4878,24 @@ f_max(typval_T *argvars, typval_T *rettv)
     max_min(argvars, rettv, TRUE);
 }
 
+/*
+ * "migemo()" function
+ */
+    static void
+f_migemo(argvars, rettv)
+    typval_T	*argvars;
+    typval_T	*rettv;
+{
+    char_u* arg = tv_get_string(&argvars[0]);
+
+    rettv->v_type = VAR_STRING;
+#ifdef USE_MIGEMO
+    rettv->vval.v_string = query_migemo(arg);
+#else
+    rettv->vval.v_string = vim_strsave(arg);
+#endif
+}
+
 /*
  * "min()" function
  */
diff --git a/src/ex_getln.c b/src/ex_getln.c
index 51433f1ec..c9d98c2f5 100644
--- a/src/ex_getln.c
+++ b/src/ex_getln.c
@@ -385,6 +385,17 @@ may_do_incsearch_highlighting(
     int		next_char;
     int		use_last_pat;
     int		did_do_incsearch = is_state->did_incsearch;
+#ifdef USE_MIGEMO
+    int		migemo_activated = 0;
+#endif
+
+#ifdef USE_MIGEMO
+    if (count < 0)
+    {
+	migemo_activated = 1;
+	count = -count - 1;
+    }
+#endif
 
     // Parsing range may already set the last search pattern.
     // NOTE: must call restore_last_search_pattern() before returning!
@@ -452,6 +463,10 @@ may_do_incsearch_highlighting(
 	    search_flags += SEARCH_KEEP;
 	if (search_first_line != 0)
 	    search_flags += SEARCH_START;
+#ifdef USE_MIGEMO
+	if (migemo_activated != 0)
+	    search_flags += SEARCH_MIGEMO;
+#endif
 	ccline.cmdbuff[skiplen + patlen] = NUL;
 #ifdef FEAT_RELTIME
 	vim_memset(&sia, 0, sizeof(sia));
@@ -565,6 +580,17 @@ may_adjust_incsearch_highlighting(
     int	    search_flags = SEARCH_NOOF;
     int	    i;
     int	    save;
+#ifdef USE_MIGEMO
+    int		migemo_activated = 0;
+#endif
+
+#ifdef USE_MIGEMO
+    if (count < 0)
+    {
+	migemo_activated = 1;
+	count = -count - 1;
+    }
+#endif
 
     // Parsing range may already set the last search pattern.
     // NOTE: must call restore_last_search_pattern() before returning!
@@ -605,6 +631,10 @@ may_adjust_incsearch_highlighting(
 	t = is_state->match_start;
     if (!p_hls)
 	search_flags += SEARCH_KEEP;
+#ifdef USE_MIGEMO
+    if (migemo_activated != 0)
+	search_flags += SEARCH_MIGEMO;
+#endif
     ++emsg_off;
     save = pat[patlen];
     pat[patlen] = NUL;
diff --git a/src/feature.h b/src/feature.h
index 7e1e982ed..799e31489 100644
--- a/src/feature.h
+++ b/src/feature.h
@@ -1254,6 +1254,16 @@
 # define FEAT_FILTERPIPE
 #endif
 
+/*
+ * +migemo		Regexp pattern expansion.  See:
+ * 				http://migemo.namazu.org/
+ * 				http://www.kaoriya.net/
+ */
+// Use migemo_open() when it's available
+#if (defined(HAVE_MIGEMO_H) && defined(HAVE_MIGEMO)) || defined(DYNAMIC_MIGEMO)
+# define USE_MIGEMO
+#endif
+
 /*
  * +vtp: Win32 virtual console.
  */
diff --git a/src/main.c b/src/main.c
index 72e51a310..ebb3ad1b3 100644
--- a/src/main.c
+++ b/src/main.c
@@ -1687,6 +1687,9 @@ getout(int exitval)
 #ifdef FEAT_PERL
     perl_end();
 #endif
+#ifdef USE_MIGEMO
+    reset_migemo(TRUE);
+#endif
 #if defined(USE_ICONV) && defined(DYNAMIC_ICONV)
     iconv_end();
 #endif
diff --git a/src/normal.c b/src/normal.c
index c4963e621..19e7bfd15 100644
--- a/src/normal.c
+++ b/src/normal.c
@@ -4247,7 +4247,12 @@ nv_search(cmdarg_T *cap)
 
     // When using 'incsearch' the cursor may be moved to set a different search
     // start position.
+#ifdef USE_MIGEMO
+    cap->searchbuf = getcmdline(cap->cmdchar,
+	    (cap->nchar == 'g' ? -cap->count1 - 1 : cap->count1), 0, TRUE);
+#else
     cap->searchbuf = getcmdline(cap->cmdchar, cap->count1, 0, TRUE);
+#endif
 
     if (cap->searchbuf == NULL)
     {
@@ -4256,8 +4261,11 @@ nv_search(cmdarg_T *cap)
     }
 
     (void)normal_search(cap, cap->cmdchar, cap->searchbuf,
-			(cap->arg || !EQUAL_POS(save_cursor, curwin->w_cursor))
-						      ? 0 : SEARCH_MARK, NULL);
+#ifdef USE_MIGEMO
+			(cap->nchar == 'g' ? SEARCH_MIGEMO : 0) |
+#endif
+			((cap->arg || !EQUAL_POS(save_cursor, curwin->w_cursor))
+						      ? 0 : SEARCH_MARK), NULL);
 }
 
 /*
@@ -6218,7 +6226,9 @@ nv_g_cmd(cmdarg_T *cap)
     case '~':
     case 'u':
     case 'U':
+#ifndef USE_MIGEMO
     case '?':
+#endif
     case '@':
 	nv_operator(cap);
 	break;
@@ -6314,6 +6324,25 @@ nv_g_cmd(cmdarg_T *cap)
 							 FALSE, FALSE, FALSE);
 	break;
 
+#ifdef USE_MIGEMO
+    case '/':
+	cap->cmdchar = '/';
+	cap->nchar = 'g';
+	nv_search(cap);
+	break;
+
+    case '?':
+	if (curbuf->b_p_migemo)
+	{
+	    cap->cmdchar = '?';
+	    cap->nchar = 'g';
+	    nv_search(cap);
+	}
+	else
+	    nv_operator(cap);
+	break;
+#endif
+
     default:
 	clearopbeep(oap);
 	break;
diff --git a/src/option.c b/src/option.c
index 93de1e307..8b22dabd6 100644
--- a/src/option.c
+++ b/src/option.c
@@ -5300,6 +5300,9 @@ get_varp(struct vimoption *p)
 	case PV_ML:	return (char_u *)&(curbuf->b_p_ml);
 	case PV_MPS:	return (char_u *)&(curbuf->b_p_mps);
 	case PV_MA:	return (char_u *)&(curbuf->b_p_ma);
+#ifdef USE_MIGEMO
+	case PV_MIG:	return (char_u *)&(curbuf->b_p_migemo);
+#endif
 	case PV_MOD:	return (char_u *)&(curbuf->b_changed);
 	case PV_NF:	return (char_u *)&(curbuf->b_p_nf);
 	case PV_PI:	return (char_u *)&(curbuf->b_p_pi);
@@ -5869,6 +5872,12 @@ buf_copy_options(buf_T *buf, int flags)
 	    buf->b_p_imsearch = p_imsearch;
 	    COPY_OPT_SCTX(buf, BV_IMS);
 
+#ifdef USE_MIGEMO
+	    // This is for migemo extension
+	    buf->b_p_migemo = p_migemo;
+	    COPY_OPT_SCTX(buf, BV_MIG);
+#endif
+
 	    // options that are normally global but also have a local value
 	    // are not copied, start using the global value
 	    buf->b_p_ar = -1;
@@ -6470,6 +6479,11 @@ option_value2string(
 	else
 	    vim_strncpy(NameBuff, varp, MAXPATHL - 1);
     }
+
+#ifdef USE_MIGEMO
+    if (varp == &p_migdict)
+	reset_migemo(FALSE);
+#endif
 }
 
 /*
diff --git a/src/option.h b/src/option.h
index 55835e8de..24d32750d 100644
--- a/src/option.h
+++ b/src/option.h
@@ -725,6 +725,10 @@ EXTERN long	p_mmt;		// 'maxmemtot'
 #ifdef FEAT_MENU
 EXTERN long	p_mis;		// 'menuitems'
 #endif
+#ifdef USE_MIGEMO
+EXTERN int	p_migemo;	// 'migemo'
+EXTERN char_u	*p_migdict;	// 'migemodict'
+#endif
 #ifdef FEAT_SPELL
 EXTERN char_u	*p_msm;		// 'mkspellmem'
 #endif
@@ -1155,6 +1159,9 @@ enum
 #endif
     , BV_MENC
     , BV_MA
+#ifdef USE_MIGEMO
+    , BV_MIG
+#endif
     , BV_ML
     , BV_MOD
     , BV_MPS
diff --git a/src/optiondefs.h b/src/optiondefs.h
index e0c893f0d..f8f501dac 100644
--- a/src/optiondefs.h
+++ b/src/optiondefs.h
@@ -104,6 +104,9 @@
 #endif
 #define PV_MENC		OPT_BOTH(OPT_BUF(BV_MENC))
 #define PV_MA		OPT_BUF(BV_MA)
+#ifdef USE_MIGEMO
+# define PV_MIG		OPT_BUF(BV_MIG)
+#endif
 #define PV_ML		OPT_BUF(BV_ML)
 #define PV_MOD		OPT_BUF(BV_MOD)
 #define PV_MPS		OPT_BUF(BV_MPS)
@@ -1703,6 +1706,14 @@ static struct vimoption options[] =
     {"mesg",	    NULL,   P_BOOL|P_VI_DEF,
 			    (char_u *)NULL, PV_NONE,
 			    {(char_u *)FALSE, (char_u *)0L} SCTX_INIT},
+#ifdef USE_MIGEMO
+    {"migemo",	    "mgm",  P_BOOL|P_VI_DEF|P_VIM,
+			    (char_u *)&p_migemo, PV_MIG,
+			    {(char_u *)FALSE, (char_u *)0L} SCTX_INIT},
+    {"migemodict",  "mgd",  P_STRING|P_EXPAND|P_VI_DEF|P_VIM,
+			    (char_u *)&p_migdict, PV_NONE,
+			    {(char_u *)"", (char_u *)0L} SCTX_INIT},
+#endif // USE_MIGEMO
     {"mkspellmem",  "msm",  P_STRING|P_VI_DEF|P_EXPAND|P_SECURE,
 #ifdef FEAT_SPELL
 			    (char_u *)&p_msm, PV_NONE,
diff --git a/src/proto/search.pro b/src/proto/search.pro
index e6ac11b2c..dfb74a196 100644
--- a/src/proto/search.pro
+++ b/src/proto/search.pro
@@ -24,6 +24,9 @@ void set_last_search_pat(char_u *s, int idx, int magic, int setlast);
 void last_pat_prog(regmmatch_T *regmatch);
 int searchit(win_T *win, buf_T *buf, pos_T *pos, pos_T *end_pos, int dir, char_u *pat, long count, int options, int pat_use, searchit_arg_T *extra_arg);
 void set_search_direction(int cdir);
+int migemo_enabled(void);
+void reset_migemo(int lastcall);
+char_u* query_migemo(char_u* str);
 int do_search(oparg_T *oap, int dirc, char_u *pat, long count, int options, searchit_arg_T *sia);
 int search_for_exact_line(buf_T *buf, pos_T *pos, int dir, char_u *pat);
 int searchc(cmdarg_T *cap, int t_cmd);
diff --git a/src/search.c b/src/search.c
index 7a97b2ee9..bf3305ea3 100644
--- a/src/search.c
+++ b/src/search.c
@@ -593,8 +593,8 @@ last_pat_prog(regmmatch_T *regmatch)
  * When FEAT_EVAL is defined, returns the index of the first matching
  * subpattern plus one; one if there was none.
  */
-    int
-searchit(
+    static int
+searchit0(
     win_T	*win,		// window to search in; can be NULL for a
 				// buffer without a window!
     buf_T	*buf,
@@ -1164,6 +1164,339 @@ first_submatch(regmmatch_T *rp)
 }
 #endif
 
+#ifdef USE_MIGEMO
+# define MIGEMO_QUERY_MAXSIZE 40960
+// Load migemo header
+# ifndef DYNAMIC_MIGEMO
+#  include <migemo.h>
+# else // DYNAMIC_MIGEMO
+
+# define MIGEMO_PROC FARPROC
+# ifndef DYNAMIC_MIGEMO_DLL
+#  define DYNAMIC_MIGEMO_DLL "migemo.dll"
+# endif
+
+#  define MIGEMO_OPINDEX_OR 0
+#  define MIGEMO_OPINDEX_NEST_IN 1
+#  define MIGEMO_OPINDEX_NEST_OUT 2
+#  define MIGEMO_OPINDEX_SELECT_IN 3
+#  define MIGEMO_OPINDEX_SELECT_OUT 4
+#  define MIGEMO_OPINDEX_NEWLINE 5
+
+typedef struct _migemo migemo;
+typedef int (*MIGEMO_PROC_CHAR2INT)(unsigned char*, unsigned int*);
+typedef int (*MIGEMO_PROC_INT2CHAR)(unsigned int, unsigned char*);
+static HANDLE hDllMigemo = NULL;
+migemo* (__stdcall *dll_migemo_open)(char*);
+void (__stdcall *dll_migemo_close)(migemo*);
+unsigned char* (__stdcall *dll_migemo_query)(migemo*, unsigned char*);
+void (__stdcall *dll_migemo_release)(migemo*, unsigned char*);
+int (__stdcall *dll_migemo_set_operator)(migemo*, int index, unsigned char* op);
+const unsigned char* (__stdcall *dll_migemo_get_operator)(migemo*, int index);
+void (__stdcall *dll_migemo_setproc_char2int)(migemo*, MIGEMO_PROC_CHAR2INT);
+void (__stdcall *dll_migemo_setproc_int2char)(migemo*, MIGEMO_PROC_INT2CHAR);
+
+#  define migemo_open dll_migemo_open
+#  define migemo_close dll_migemo_close
+#  define migemo_query dll_migemo_query
+#  define migemo_release dll_migemo_release
+#  define migemo_set_operator dll_migemo_set_operator
+#  define migemo_get_operator dll_migemo_get_operator
+#  define migemo_setproc_char2int dll_migemo_setproc_char2int
+#  define migemo_setproc_int2char dll_migemo_setproc_int2char
+
+    static void
+dyn_migemo_end()
+{
+    if (hDllMigemo)
+    {
+	FreeLibrary(hDllMigemo);
+	hDllMigemo = NULL;
+    }
+}
+
+    static int
+dyn_migemo_init()
+{
+    static struct { char* name; MIGEMO_PROC* ptr; } migemo_func_table[] = {
+	{"migemo_open", (MIGEMO_PROC*)&dll_migemo_open},
+	{"migemo_close", (MIGEMO_PROC*)&dll_migemo_close},
+	{"migemo_query", (MIGEMO_PROC*)&dll_migemo_query},
+	{"migemo_release", (MIGEMO_PROC*)&dll_migemo_release},
+	{"migemo_set_operator", (MIGEMO_PROC*)&dll_migemo_set_operator},
+	{"migemo_get_operator", (MIGEMO_PROC*)&dll_migemo_get_operator},
+	{"migemo_setproc_char2int", (MIGEMO_PROC*)&dll_migemo_setproc_char2int},
+	{"migemo_setproc_int2char", (MIGEMO_PROC*)&dll_migemo_setproc_int2char},
+	{NULL, NULL},
+    };
+    int i;
+
+    if (hDllMigemo)
+	return 1;
+    if (!(hDllMigemo = LoadLibraryEx(DYNAMIC_MIGEMO_DLL, NULL, 0)))
+	return 0;
+    for (i = 0; migemo_func_table[i].ptr; ++i)
+    {
+	if (!(*migemo_func_table[i].ptr = GetProcAddress(hDllMigemo,
+			migemo_func_table[i].name)))
+	{
+	    dyn_migemo_end();
+	    return 0;
+	}
+    }
+    return 1;
+}
+# endif // DYNAMIC_MIGEMO
+
+    static int
+vimigemo_char2int(unsigned char* p, unsigned int* code)
+{
+    unsigned int ch = *p;
+    int len = 1;
+
+    if (has_mbyte)
+    {
+	ch = (*mb_ptr2char)(p);
+	len = (*mb_ptr2len)(p);
+    }
+    if (code)
+	*code = ch;
+    return len;
+}
+
+    static int
+vimigemo_int2char(unsigned int code, unsigned char* buf)
+{
+    int len;
+
+    if (has_mbyte && (len = (*mb_char2len)(code)) != 1)
+    {
+	if (buf)
+	    (*mb_char2bytes)(code, buf);
+    }
+    else
+    {
+	len = 0;
+	switch (code)
+	{
+	    case '\\':
+	    case '.': case '*': case '^': case '$': case '/':
+	    case '[': case ']': case '~':
+		if (buf)
+		    buf[len] = '\\';
+		++len;
+	    default:
+		if (buf)
+		    buf[len] = (unsigned char)(code & 0xFF);
+		++len;
+		break;
+	}
+    }
+
+    return len;
+}
+
+    int
+migemo_enabled()
+{
+    return
+#ifdef DYNAMIC_MIGEMO
+	dyn_migemo_init()
+#else
+	1
+#endif
+	;
+}
+
+static migemo* migemo_object = NULL;
+static int migemo_tryload = 0;
+
+    static void
+init_migemo()
+{
+# ifdef DYNAMIC_MIGEMO
+    if (!dyn_migemo_init())
+	return;
+# endif
+    if (migemo_tryload || migemo_object)
+	return;
+
+    migemo_tryload = 1;
+    migemo_object = migemo_open(p_migdict);
+
+    if (!migemo_object)
+	return;
+
+    migemo_set_operator(migemo_object, MIGEMO_OPINDEX_OR, "\\|");
+    migemo_set_operator(migemo_object, MIGEMO_OPINDEX_NEST_IN, "\\%(");
+    migemo_set_operator(migemo_object, MIGEMO_OPINDEX_NEST_OUT, "\\)");
+    migemo_set_operator(migemo_object, MIGEMO_OPINDEX_NEST_OUT, "\\)");
+    migemo_set_operator(migemo_object, MIGEMO_OPINDEX_NEWLINE, "\\_s*");
+    migemo_setproc_int2char(migemo_object, vimigemo_int2char);
+    migemo_setproc_char2int(migemo_object, vimigemo_char2int);
+}
+
+    void
+reset_migemo(int lastcall)
+{
+    if (migemo_object)
+	migemo_close(migemo_object);
+    migemo_object = NULL;
+    migemo_tryload = 0;
+# ifdef DYNAMIC_MIGEMO
+    if (lastcall)
+	dyn_migemo_end();
+# endif
+}
+
+    char_u*
+query_migemo(char_u* str)
+{
+    char_u *retval = NULL;
+
+    if (str)
+    {
+	init_migemo();
+	if (migemo_object)
+	{
+	    char *query = migemo_query(migemo_object, str);
+
+	    if (query != NULL)
+	    {
+		retval = vim_strsave(query);
+		migemo_release(migemo_object, query);
+	    }
+	}
+    }
+    return retval ? retval : str;
+}
+
+    int
+check_migemo_able_string(char_u* str)
+{
+    size_t len;
+
+    len = STRLEN(str);
+    // Disabled because of adding query size limitation.
+#if 0
+    if (len == 1 && vim_strchr("kstnKSTN", str[0]))
+	return 0;
+#endif
+    // TODO: Incomplete method.  To be improved.
+    if (len >= 1 && (vim_strchr(str, '^')))
+	return 0;
+    if (len >= 2 && !STRNCMP(str, "\\<", 2))
+	return 0;
+    // Search for multibyte char
+    if (has_mbyte)
+	while (*str)
+	{
+	    if ((*mb_ptr2len)(str) > 1)
+		return 0;
+	    ++str;
+	}
+    return 1;
+}
+
+/*
+ * Search with migemo, mimic of searchit()
+ */
+    static int
+searchit_migemo(
+    win_T	*win,
+    buf_T	*buf,
+    pos_T	*pos,
+    pos_T	*end_pos,
+    int		dir,
+    char_u	*str,
+    long	count,
+    int		options,
+    int		pat_use,
+    searchit_arg_T *extra_arg,
+    int		*did)
+{
+    int retval = 0;
+    int didval = 0;
+
+    if (str && buf && STRLEN(p_migdict) > 0 && check_migemo_able_string(str))
+    {
+	init_migemo();
+	if (migemo_object)
+	{
+	    char	*query;
+	    char_u	*newstr = NULL;
+
+	    // Remove backslash in str
+	    if (vim_strchr(str, '\\') && (newstr = vim_strsave(str)))
+	    {
+		char_u *p, *end = newstr + STRLEN(newstr);
+
+		for (p = newstr; p[0] != NUL; ++p)
+		{
+		    if ((p = vim_strchr(p, '\\')) == NULL)
+			break;
+		    mch_memmove(p, p + 1, end - p);
+		}
+		str = newstr;
+	    }
+	    query = migemo_query(migemo_object, str);
+	    if (query && STRLEN(query) < MIGEMO_QUERY_MAXSIZE)
+	    {
+		retval = searchit0(win, buf, pos, end_pos, dir, query,
+			count, options, pat_use, extra_arg);
+		didval = 1;
+	    }
+	    if (query)
+		migemo_release(migemo_object, query);
+	    if (newstr)
+		vim_free(newstr);
+	}
+    }
+
+    if (did)
+	*did = didval;
+    return retval;
+}
+
+#endif // USE_MIGEMO
+
+/*
+ * wrapper of searchit0().
+ *
+ * This extends original one to accept SEARCH_MIGEMO for options.
+ * If this flag is set, migemo feature is enabled for the search.
+ */
+    int
+searchit(
+    win_T	*win,
+    buf_T	*buf,
+    pos_T	*pos,
+    pos_T	*end_pos,
+    int		dir,
+    char_u	*pat,
+    long	count,
+    int		options,
+    int		pat_use,
+    searchit_arg_T *extra_arg)
+{
+#ifdef USE_MIGEMO
+    if (options & SEARCH_MIGEMO)
+    {
+	int did = 0;
+	int ret;
+
+	options &= ~SEARCH_MIGEMO;
+	ret = searchit_migemo(win, buf, pos, end_pos, dir, pat, count, options,
+		pat_use, extra_arg, &did);
+	if (did)
+	    return ret;
+    }
+#endif
+    return searchit0(win, buf, pos, end_pos, dir, pat, count, options,
+	    pat_use, extra_arg);
+}
+
+
 /*
  * Highest level string search function.
  * Search for the 'count'th occurrence of pattern 'pat' in direction 'dirc'
@@ -1523,6 +1856,9 @@ do_search(
 		searchstr, count, spats[0].off.end + (options &
 		       (SEARCH_KEEP + SEARCH_PEEK + SEARCH_HIS
 			+ SEARCH_MSG + SEARCH_START
+#ifdef USE_MIGEMO
+			+ SEARCH_MIGEMO
+#endif
 			+ ((pat != NULL && *pat == ';') ? 0 : SEARCH_NOOF))),
 		RE_LAST, sia);
 
diff --git a/src/structs.h b/src/structs.h
index a543d3b07..c57b9f048 100644
--- a/src/structs.h
+++ b/src/structs.h
@@ -2484,6 +2484,9 @@ struct file_buffer
 #endif
     char_u	*b_p_menc;	// 'makeencoding'
     char_u	*b_p_mps;	// 'matchpairs'
+#ifdef USE_MIGEMO
+    int		b_p_migemo;	// 'migemo'
+#endif
     int		b_p_ml;		// 'modeline'
     int		b_p_ml_nobin;	// b_p_ml saved for binary mode
     int		b_p_ma;		// 'modifiable'
diff --git a/src/version.c b/src/version.c
index 7d9b3db90..1b9e980ac 100644
--- a/src/version.c
+++ b/src/version.c
@@ -349,6 +349,15 @@ static char *(features[]) =
 #else
 	"-menu",
 #endif
+#ifdef USE_MIGEMO
+# ifdef DYNAMIC_MIGEMO
+	"+migemo/dyn",
+# else
+	"+migemo",
+# endif
+#else
+	"-migemo",
+#endif
 #ifdef FEAT_SESSION
 	"+mksession",
 #else
diff --git a/src/vim.h b/src/vim.h
index 4b47dfc2a..fb2b3032a 100644
--- a/src/vim.h
+++ b/src/vim.h
@@ -924,6 +924,9 @@ extern int (*dyn_libintl_wputenv)(const wchar_t *envstring);
 #define SEARCH_KEEP  0x400  // keep previous search pattern
 #define SEARCH_PEEK  0x800  // peek for typed char, cancel search
 #define SEARCH_COL  0x1000  // start at specified column instead of zero
+#ifdef USE_MIGEMO
+# define SEARCH_MIGEMO	0x2000	// use migemo for search
+#endif
 
 // Values for find_ident_under_cursor()
 #define FIND_IDENT	1	// find identifier (word)
