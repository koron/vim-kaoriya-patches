# HG changeset patch
# Parent fa9faba0b6f00a8cd2c4cc351b3219114c563e59
# Parent  1525e3b054820f1cd6b20cbbe34776733d7d6d5b

diff -r 1525e3b05482 src/Make_mvc.mak
--- a/src/Make_mvc.mak	Sat Jul 04 11:24:45 2015 +0900
+++ b/src/Make_mvc.mak	Sat Jul 04 11:24:49 2015 +0900
@@ -576,6 +576,7 @@
 	$(OUTDIR)\getchar.obj \
 	$(OUTDIR)\hardcopy.obj \
 	$(OUTDIR)\hashtab.obj \
+	$(OUTDIR)\job.obj \
 	$(OUTDIR)\main.obj \
 	$(OUTDIR)\mark.obj \
 	$(OUTDIR)\mbyte.obj \
@@ -1155,6 +1156,8 @@
 
 $(OUTDIR)/hashtab.obj:	$(OUTDIR) hashtab.c  $(INCL)
 
+$(OUTDIR)/job.obj:	$(OUTDIR) job.c  $(INCL)
+
 $(OUTDIR)/gui.obj:	$(OUTDIR) gui.c  $(INCL) $(GUI_INCL)
 
 $(OUTDIR)/gui_beval.obj:	$(OUTDIR) gui_beval.c $(INCL) $(GUI_INCL)
@@ -1328,6 +1331,7 @@
 	proto/getchar.pro \
 	proto/hardcopy.pro \
 	proto/hashtab.pro \
+	proto/job.pro \
 	proto/main.pro \
 	proto/mark.pro \
 	proto/memfile.pro \
diff -r 1525e3b05482 src/eval.c
--- a/src/eval.c	Sat Jul 04 11:24:45 2015 +0900
+++ b/src/eval.c	Sat Jul 04 11:24:49 2015 +0900
@@ -377,6 +377,16 @@
 static dictitem_T	vimvars_var;		/* variable used for v: */
 #define vimvarht  vimvardict.dv_hashtab
 
+#if defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL)
+/*
+ * Running job's host variables.
+ */
+static dict_T		jobvardict;
+static dictitem_T	jobvars_var;
+# define jobvarht	jobvardict.dv_hashtab
+static int		job_next_id = 0;
+#endif /* defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL) */
+
 static void prepare_vimvar __ARGS((int idx, typval_T *save_tv));
 static void restore_vimvar __ARGS((int idx, typval_T *save_tv));
 static int ex_let_vars __ARGS((char_u *arg, typval_T *tv, int copy, int semicolon, int var_count, char_u *nextchars));
@@ -603,6 +613,7 @@
 static void f_isdirectory __ARGS((typval_T *argvars, typval_T *rettv));
 static void f_islocked __ARGS((typval_T *argvars, typval_T *rettv));
 static void f_items __ARGS((typval_T *argvars, typval_T *rettv));
+static void f_jobrun __ARGS((typval_T *argvars, typval_T *rettv));
 static void f_join __ARGS((typval_T *argvars, typval_T *rettv));
 static void f_keys __ARGS((typval_T *argvars, typval_T *rettv));
 static void f_last_buffer_nr __ARGS((typval_T *argvars, typval_T *rettv));
@@ -875,6 +886,10 @@
     vimvardict.dv_lock = VAR_FIXED;
     hash_init(&compat_hashtab);
     hash_init(&func_hashtab);
+#if defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL)
+    init_var_dict(&jobvardict, &jobvars_var);
+#endif /* defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL) */
+    jobvardict.dv_lock = VAR_FIXED;
 
     for (i = 0; i < VV_LEN; ++i)
     {
@@ -936,6 +951,11 @@
     free_locales();
 # endif
 
+#if defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL)
+    /* job's host variables. */
+    vars_clear(&jobvarht);
+#endif /* defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL) */
+
     /* global variables */
     vars_clear(&globvarht);
 
@@ -6906,6 +6926,9 @@
 								  NULL, NULL);
 #endif
 
+    /* job's host variables */
+    set_ref_in_ht(&jobvarht, copyID);
+
     /* global variables */
     abort = abort || set_ref_in_ht(&globvarht, copyID, NULL);
 
@@ -8207,6 +8230,7 @@
     {"isdirectory",	1, 1, f_isdirectory},
     {"islocked",	1, 1, f_islocked},
     {"items",		1, 1, f_items},
+    {"jobrun",		1, 1, f_jobrun},
     {"join",		1, 2, f_join},
     {"keys",		1, 1, f_keys},
     {"last_buffer_nr",	0, 0, f_last_buffer_nr},/* obsolete */
@@ -21406,6 +21430,9 @@
 					? NULL : &current_funccal->l_vars_var;
 	    case 'a': return current_funccal == NULL
 				       ? NULL : &current_funccal->l_avars_var;
+#if defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL)
+	    case 'j': return &jobvars_var;
+#endif /* defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL) */
 	}
 	return NULL;
     }
@@ -21483,6 +21510,10 @@
     if (*name == 's'				/* script variable */
 	    && current_SID > 0 && current_SID <= ga_scripts.ga_len)
 	return &SCRIPT_VARS(current_SID);
+#if defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL)
+    if (*name == 'j')
+	return &jobvarht;
+#endif /* defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL) */
     return NULL;
 }
 
@@ -25695,3 +25726,184 @@
 }
 
 #endif /* defined(FEAT_MODIFY_FNAME) || defined(FEAT_EVAL) */
+
+#if defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL)
+
+typedef struct _eval_job_T
+{
+    int		ej_id;
+    dict_T	*ej_dict;
+} eval_job_T;
+
+    static void
+eval_job_pin(int key, dict_T *d)
+{
+    char_u	varname[NUMBUFLEN];
+    dictitem_T  *v;
+
+    vim_snprintf((char *)varname, NUMBUFLEN, "%d", key);
+
+    v = (dictitem_T *)alloc((unsigned)(sizeof(dictitem_T)
+                + STRLEN(varname)));
+    if (v == NULL)
+        return; /* FIXME: raise an error. */
+
+    STRCPY(v->di_key, varname);
+    if (hash_add(&jobvarht, DI2HIKEY(v)) == FAIL)
+    {
+        vim_free(v);
+        return; /* FIXME: raise an error. */
+    }
+
+    v->di_flags = 0;
+    v->di_tv.v_type = VAR_DICT;
+    v->di_tv.v_lock = 0;
+    v->di_tv.vval.v_dict = d;
+}
+
+    static void
+eval_job_unpin(int key)
+{
+    char_u	varname[NUMBUFLEN];
+    hashitem_T	*hi;
+
+    vim_snprintf((char *)varname, NUMBUFLEN, "%d", key);
+    hi = hash_find(&jobvarht, varname);
+    if (!HASHITEM_EMPTY(hi))
+        hash_remove(&jobvarht, hi);
+}
+
+    static char_u *
+eval_job_findfunc(dict_T *d, char_u *key, int *outlen)
+{
+    dictitem_T	*di;
+    char_u	*func = NULL;
+
+    di = dict_find(d, key, (int)STRLEN(key));
+    if (di == NULL)
+	return NULL;
+
+    if (di->di_tv.v_type == VAR_FUNC)
+	func = di->di_tv.vval.v_string;
+    else
+	func = get_tv_string(&di->di_tv);
+
+    if (func != NULL && outlen != NULL)
+	*outlen = (int)STRLEN(func);
+    return func;
+}
+
+    static int
+eval_job_checkend(job)
+    eval_job_T	*job;
+{
+    int		next_wait = 0;
+    char_u	*func;
+    int		len = 0;
+    typval_T	rettv;
+    typval_T	argv[1];
+    int		doesrange;
+
+    _RPT1(_CRT_WARN, "f_jobrun#checkend: %p\n", job);
+
+    /* call "check" method of job->ej_dict. */
+    func = eval_job_findfunc(job->ej_dict, "check", &len);
+    if (func != NULL)
+    {
+	rettv.v_type = VAR_UNKNOWN;
+	if (call_func(func, len, &rettv, 0, argv, 1, 1, &doesrange, TRUE,
+		    job->ej_dict) == OK)
+	    next_wait = get_tv_number(&rettv);
+	clear_tv(&rettv);
+    }
+
+    _RPT1(_CRT_WARN, "  -> %d\n", next_wait);
+
+    return next_wait;
+}
+
+    static void
+eval_job_close(job)
+    eval_job_T	*job;
+{
+    char_u	*func;
+    int		len = 0;
+    typval_T	rettv;
+    typval_T	argv[1];
+    int		doesrange;
+    int		res;
+
+    _RPT2(_CRT_WARN, "f_jobrun#onend: %p,%p\n", job, job->ej_dict);
+
+    func = eval_job_findfunc(job->ej_dict, "onend", &len);
+    if (func != NULL)
+    {
+	rettv.v_type = VAR_UNKNOWN;
+	res = call_func(func, len, &rettv, 0, argv, 1, 1, &doesrange, TRUE,
+		job->ej_dict);
+	clear_tv(&rettv);
+    }
+
+    eval_job_unpin(job->ej_id);
+    dict_unref(job->ej_dict);
+    vim_free(job);
+}
+
+    static int
+eval_job_newid(void)
+{
+    /* TODO: consider overflow and recycle id. */
+    return job_next_id++;
+}
+
+/*
+ * "jobrun({dict})" function
+ *
+ * {dict} must have two methods "check", "onend".
+ */
+    static void
+f_jobrun(argvars, rettv)
+    typval_T	*argvars;
+    typval_T	*rettv;
+{
+    int		newid;
+    dict_T	*d;
+    eval_job_T	*job;
+    job_T	*gj;
+
+    if (argvars[0].v_type != VAR_DICT)
+    {
+	/* FIXME: add "e_dictarg" or so, and replace by it. */
+	EMSG(_(e_dictreq));
+	return;
+    }
+
+    d = argvars[0].vval.v_dict;
+    if (d == NULL)
+	return;
+
+    newid = eval_job_newid();
+    if (newid < 0)
+    {
+	/* FIXME: show fatal error. */
+	return;
+    }
+
+    job = (eval_job_T*)alloc(sizeof(*job));
+    if (job == NULL)
+    {
+	/* FIXME: show error. */
+	return;
+    }
+
+    eval_job_pin(newid, d);
+    job->ej_id = newid;
+    job->ej_dict = d;
+    ++job->ej_dict->dv_refcount;
+
+    gj = job_add(job, (JOB_CHECK_END)eval_job_checkend,
+	    (JOB_CLOSE)eval_job_close, 1000);
+    _RPT2(_CRT_WARN, "f_jobrun=%p (%d)\n", gj, newid);
+}
+
+#endif /* defined(FEAT_JOB_BASE) && defined(FEAT_JOB_EVAL) */
diff -r 1525e3b05482 src/globals.h
--- a/src/globals.h	Sat Jul 04 11:24:45 2015 +0900
+++ b/src/globals.h	Sat Jul 04 11:24:49 2015 +0900
@@ -1635,3 +1635,11 @@
 #ifdef FEAT_ARABIC
 # include "arabic.h"
 #endif
+
+/*
+ * Asynchronous job support.
+ */
+#ifdef FEAT_JOB_BASE
+EXTERN job_T	*job_top_p	INIT(= NULL);
+EXTERN int	job_next_wait	INIT(= -1);
+#endif
diff -r 1525e3b05482 src/job.c
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/job.c	Sat Jul 04 11:24:49 2015 +0900
@@ -0,0 +1,163 @@
+/* vim:set ts=8 sts=4 sw=4 tw=0 noet:
+ *
+ * VIM - Vi IMproved	by Bram Moolenaar
+ *
+ * Do ":help uganda"  in Vim to read copying and usage conditions.
+ * Do ":help credits" in Vim to see a list of people who contributed.
+ * See README.txt for an overview of the Vim source code.
+ */
+/*
+ * job.c - Asynchronous job support.
+ *
+ * Original Author: MURAOKA Taro
+ *
+ * Released under Vim License.
+ */
+
+#include "vim.h"
+
+#define JOB_WAIT_MIN		100
+
+static void setup_timer_arch(int msec);
+static void remove_timer_arch(void);
+
+#ifdef FEAT_GUI_W32
+
+/*
+ * Timer related functions for Windows.
+ */
+
+static UINT_PTR timer_id_w32 = 0;
+
+    static void CALLBACK
+timer_proc_w32(HWND hWnd, UINT uMsg UNUSED, UINT_PTR idEvent UNUSED,
+	DWORD dwTime UNUSED)
+{
+    job_check_ends();
+}
+
+    void
+setup_timer_arch(int msec)
+{
+    remove_timer_arch();
+    if (msec >= 0)
+    {
+	if (msec < JOB_WAIT_MIN)
+	    msec = JOB_WAIT_MIN;
+	timer_id_w32 = SetTimer(NULL, 0, msec, timer_proc_w32);
+    }
+}
+
+    void
+remove_timer_arch(void)
+{
+    if (timer_id_w32 != 0)
+    {
+	KillTimer(NULL, timer_id_w32);
+	timer_id_w32 = 0;
+    }
+}
+
+#else
+
+    void
+setup_timer_arch(int msec)
+{
+    /* nothing to do. */
+}
+
+    void
+remove_timer_arch(void)
+{
+    /* nothing to do. */
+}
+
+#endif
+
+    static void
+setup_timer(int msec)
+{
+    if (msec >= 0)
+    {
+	setup_timer_arch(msec);
+    }
+    job_next_wait = msec;
+}
+
+    static void
+remove_timer(void)
+{
+    remove_timer_arch();
+    job_next_wait = -1;
+}
+
+    job_T *
+job_add(void *data, JOB_CHECK_END check_end, JOB_CLOSE close, int wait)
+{
+    job_T	*job;
+
+    if (check_end == NULL)
+	return NULL;
+
+    job = (job_T*)alloc(sizeof(job_T));
+    if (job != NULL)
+    {
+	job->data	= data;
+	job->check_end	= check_end;
+	job->close	= close;
+	job->wait	= wait > JOB_WAIT_MIN ? wait : JOB_WAIT_MIN;
+	job->next	= job_top_p;
+
+	job_top_p = job;
+	if (job_next_wait < 0 || job->wait < job_next_wait)
+	{
+	    setup_timer(job->wait);
+	}
+    }
+    return job;
+}
+
+/**
+ * Detect jobs which ended, and dispose job_T.
+ */
+    void
+job_check_ends(void)
+{
+    job_T	**pp;
+    job_T	*job;
+    int		next_wait = -1;
+
+    remove_timer();
+
+    for (pp = &job_top_p; (job = *pp) != NULL; )
+    {
+	int remain = (*job->check_end)(job->data);
+	if (remain > 0)
+	{
+	    /* A job is alive, update wait timer. */
+	    job->wait = remain > JOB_WAIT_MIN ? remain : JOB_WAIT_MIN;
+	    if (next_wait < 0 || job->wait < next_wait)
+		next_wait = job->wait;
+	    pp = &job->next;
+	}
+	else
+	{
+	    /* A job is ended, notify the end. */
+	    if (job->close)
+		(*job->close)(job->data);
+	    /* dispose the job object. */
+	    *pp = job->next;
+	    vim_free(job);
+	}
+    }
+
+    if (next_wait >= 0)
+	setup_timer(next_wait);
+}
+
+    int
+job_get_wait(void)
+{
+    int wait = job_top_p == NULL ? -1 : job_next_wait;
+    return wait;
+}
diff -r 1525e3b05482 src/job_test.vim
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/job_test.vim	Sat Jul 04 11:24:49 2015 +0900
@@ -0,0 +1,10 @@
+" vim:set ts=8 sts=2 sw=2 tw=0 et:
+
+let job = { 'data': 'foo' }
+
+function job.onend() dict
+  echo '#onend ' . self.data
+endfunction
+
+call jobrun(job)
+"call job.onend()
diff -r 1525e3b05482 src/job_test2.vim
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/job_test2.vim	Sat Jul 04 11:24:49 2015 +0900
@@ -0,0 +1,13 @@
+" vim:set ts=8 sts=2 sw=2 tw=0 et:
+
+function! OnEnd() dict
+  echo '#OnEnd ' . self.data
+endfunction
+
+let job = {
+      \ 'data': 'foo',
+      \ 'onend': function('OnEnd'),
+      \ }
+
+call jobrun(job)
+"call job.onend()
diff -r 1525e3b05482 src/job_test3.vim
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/job_test3.vim	Sat Jul 04 11:24:49 2015 +0900
@@ -0,0 +1,17 @@
+" vim:set ts=8 sts=2 sw=2 tw=0 et:
+
+function! JobTimer(sec)
+  let goal = localtime() + a:sec
+  let job = { 'goal': goal, 'label': a:sec }
+
+  function job.check() dict
+    let remain = self.goal - localtime()
+    return remain > 0 ? remain * 1000 : 0
+  endfunction
+
+  function job.onend() dict
+    echo 'JobTimer#onend: ' . self.label
+  endfunction
+
+  call jobrun(job)
+endfunction
diff -r 1525e3b05482 src/os_win32.c
--- a/src/os_win32.c	Sat Jul 04 11:24:45 2015 +0900
+++ b/src/os_win32.c	Sat Jul 04 11:24:49 2015 +0900
@@ -1433,6 +1433,9 @@
      */
     for (;;)
     {
+#ifdef FEAT_JOB_BASE
+        job_check_ends();
+#endif
 #ifdef FEAT_MZSCHEME
 	mzvim_check_threads();
 #endif
@@ -1460,7 +1463,15 @@
 	if (msec != 0)
 	{
 	    DWORD dwWaitTime = dwEndTime - dwNow;
-
+#ifdef FEAT_JOB_BASE
+	    int job_wait;
+#endif
+
+#ifdef FEAT_JOB_BASE
+	    job_wait = job_get_wait();
+	    if (job_wait > 0 && (DWORD)job_wait < dwWaitTime)
+		dwWaitTime = job_wait;
+#endif
 #ifdef FEAT_MZSCHEME
 	    if (mzthreads_allowed() && p_mzq > 0
 				    && (msec < 0 || (long)dwWaitTime > p_mzq))
@@ -5733,6 +5744,28 @@
     Sleep((int)msec);	    /* never wait for input */
 #else /* Console */
     if (ignoreinput)
+    {
+# ifdef FEAT_JOB_BASE
+	int job_wait;
+# endif
+
+# ifdef FEAT_JOB_BASE
+	/* FIXME: consider combination with FEAT_MZSCHEME. */
+	job_wait = job_get_wait();
+	if (job_wait > 0 && job_wait < msec)
+	{
+	    while (msec > 0)
+	    {
+		job_check_ends();
+		job_wait = job_get_wait();
+		if (job_wait < 0 || msec < job_wait)
+		    job_wait = msec;
+		Sleep(job_wait);
+		msec -= job_wait;
+	    }
+	}
+	else
+# endif
 # ifdef FEAT_MZSCHEME
 	if (mzthreads_allowed() && p_mzq > 0 && msec > p_mzq)
 	{
@@ -5751,6 +5784,7 @@
 	else
 # endif
 	    Sleep((int)msec);
+    }
     else
 	WaitForChar(msec);
 #endif
diff -r 1525e3b05482 src/proto.h
--- a/src/proto.h	Sat Jul 04 11:24:45 2015 +0900
+++ b/src/proto.h	Sat Jul 04 11:24:49 2015 +0900
@@ -95,6 +95,7 @@
 # endif
 # include "hardcopy.pro"
 # include "hashtab.pro"
+# include "job.pro"
 # include "main.pro"
 # include "mark.pro"
 # include "memfile.pro"
diff -r 1525e3b05482 src/proto/job.pro
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/proto/job.pro	Sat Jul 04 11:24:49 2015 +0900
@@ -0,0 +1,5 @@
+/* job.c */
+job_T * job_add __ARGS((void *data, JOB_CHECK_END check_end, JOB_CLOSE close, int wait));
+void job_check_ends __ARGS((void));
+int job_get_wait __ARGS((void));
+/* vim: set ft=c noet: */
diff -r 1525e3b05482 src/structs.h
--- a/src/structs.h	Sat Jul 04 11:24:45 2015 +0900
+++ b/src/structs.h	Sat Jul 04 11:24:49 2015 +0900
@@ -20,6 +20,22 @@
 typedef unsigned short	short_u;
 #endif
 
+#ifdef FEAT_JOB_BASE
+typedef int (*JOB_CHECK_END)(void *);
+typedef void (*JOB_CLOSE)(void *);
+
+typedef struct _job_T job_T;
+
+struct _job_T
+{
+    void	    *data;
+    JOB_CHECK_END   check_end;
+    JOB_CLOSE	    close;
+    int		    wait;
+    job_T	    *next;
+};
+#endif
+
 /*
  * position in file or buffer
  */
diff -r 1525e3b05482 src/vim.h
--- a/src/vim.h	Sat Jul 04 11:24:45 2015 +0900
+++ b/src/vim.h	Sat Jul 04 11:24:49 2015 +0900
@@ -9,6 +9,10 @@
 #ifndef VIM__H
 # define VIM__H
 
+/* TODO: make FEAT_JOB_* as puzzle and move into the Makefile. */
+#define FEAT_JOB_BASE		1
+#define FEAT_JOB_EVAL		1
+
 /* use fastcall for Borland, when compiling for Win32 (not for DOS16) */
 #if defined(__BORLANDC__) && defined(WIN32) && !defined(DEBUG)
 #if defined(FEAT_PERL) || \
